{%- assign color_scheme_hash = section.settings.color_scheme.settings.background_gradient | default: section.settings.color_scheme.settings.background | md5 -%}

<style>
  /* Custom Order Form Styles */
  .custom-order-form-section .form {
    max-width: 800px;
    margin: 0 auto;
  }

  .custom-order-form-section .fieldset {
    gap: 1.5rem;
  }

  .custom-order-form-section .fieldset-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
  }

  .custom-order-form-section .phone-input-group {
    display: grid;
    grid-template-columns: 150px 1fr;
    gap: 0.75rem;
  }

  .custom-order-form-section .full-width {
    grid-column: 1 / -1;
  }

  .custom-order-form-section label {
    font-size: 0.813rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .custom-order-form-section input,
  .custom-order-form-section select,
  .custom-order-form-section textarea {
    padding: 0.875rem 1rem;
    font-size: 0.938rem;
  }

  .custom-order-form-section select {
    cursor: pointer;
  }

  .custom-order-form-section textarea {
    min-height: 140px;
    font-family: inherit;
  }

  /* File Upload Styles */
  .custom-order-form-section .file-upload-label {
    display: block;
    margin-bottom: 0.75rem;
  }

  .custom-order-form-section .file-upload-container {
    border: 2px dashed #cbd5e0;
    border-radius: 8px;
    padding: 2.5rem 1.5rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    background: #f7fafc;
  }

  .custom-order-form-section .file-upload-container:hover {
    border-color: #667eea;
    background: rgba(102, 126, 234, 0.05);
  }

  .custom-order-form-section .file-upload-container.dragover {
    border-color: #667eea;
    background: rgba(102, 126, 234, 0.1);
    transform: scale(1.02);
  }

  .custom-order-form-section .file-upload-container.uploading {
    pointer-events: none;
    opacity: 0.6;
  }

  .custom-order-form-section .upload-icon {
    font-size: 2.5rem;
    margin-bottom: 0.75rem;
  }

  .custom-order-form-section .upload-text {
    font-size: 1rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 0.5rem;
  }

  .custom-order-form-section .upload-hint {
    font-size: 0.813rem;
    color: #718096;
  }

  /* Files List */
  .custom-order-form-section .files-list {
    display: none;
    margin-top: 1rem;
  }

  .custom-order-form-section .files-list.show {
    display: block;
  }

  .custom-order-form-section .files-list-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
    padding: 0.5rem 0;
  }

  .custom-order-form-section .files-count {
    font-size: 0.875rem;
    font-weight: 600;
    color: #2d3748;
  }

  .custom-order-form-section .clear-all-btn {
    background: none;
    border: none;
    color: #e53e3e;
    cursor: pointer;
    font-size: 0.813rem;
    font-weight: 600;
    padding: 0.25rem 0.5rem;
    transition: all 0.2s;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .custom-order-form-section .clear-all-btn:hover {
    background: rgba(229, 62, 62, 0.1);
    border-radius: 4px;
  }

  .custom-order-form-section .retry-upload-btn {
    background: none;
    border: none;
    color: #667eea;
    cursor: pointer;
    font-size: 0.813rem;
    font-weight: 600;
    padding: 0.25rem 0.5rem;
    transition: all 0.2s;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .custom-order-form-section .retry-upload-btn:hover {
    background: rgba(102, 126, 234, 0.1);
    border-radius: 4px;
  }

  .custom-order-form-section .file-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.875rem 1rem;
    background: #f7fafc;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    margin-bottom: 0.5rem;
    transition: all 0.2s;
  }

  .custom-order-form-section .file-item:hover {
    background: #edf2f7;
  }

  .custom-order-form-section .file-item.uploading {
    background: rgba(102, 126, 234, 0.05);
    border-color: #667eea;
  }

  .custom-order-form-section .file-item.uploaded {
    background: rgba(72, 187, 120, 0.05);
    border-color: #48bb78;
  }

  .custom-order-form-section .file-item.error {
    background: rgba(229, 62, 62, 0.05);
    border-color: #e53e3e;
  }

  .custom-order-form-section .file-info-wrapper {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex: 1;
  }

  .custom-order-form-section .file-icon {
    font-size: 1.25rem;
    flex-shrink: 0;
  }

  .custom-order-form-section .file-details {
    flex: 1;
    min-width: 0;
  }

  .custom-order-form-section .file-name {
    font-size: 0.875rem;
    color: #2d3748;
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .custom-order-form-section .file-size {
    font-size: 0.75rem;
    color: #718096;
    margin-top: 0.125rem;
  }

  .custom-order-form-section .file-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .custom-order-form-section .status-icon {
    font-size: 1rem;
  }

  .custom-order-form-section .remove-file-btn {
    background: none;
    border: none;
    color: #718096;
    cursor: pointer;
    font-size: 1.25rem;
    padding: 0.25rem;
    width: 1.75rem;
    height: 1.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    border-radius: 4px;
    flex-shrink: 0;
  }

  .custom-order-form-section .remove-file-btn:hover {
    background: rgba(229, 62, 62, 0.1);
    color: #e53e3e;
  }

  /* Upload Progress */
  .custom-order-form-section .upload-progress-container {
    display: none;
    margin-top: 1rem;
    padding: 1rem;
    background: #f7fafc;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
  }

  .custom-order-form-section .upload-progress-container.show {
    display: block;
  }

  .custom-order-form-section .progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .custom-order-form-section .progress-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: #2d3748;
  }

  .custom-order-form-section .progress-count {
    font-size: 0.813rem;
    color: #718096;
  }

  .custom-order-form-section .progress-bar {
    width: 100%;
    height: 8px;
    background: #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }

  .custom-order-form-section .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    border-radius: 4px;
    transition: width 0.3s ease;
    width: 0%;
  }

  /* Error message */
  .custom-order-form-section .upload-error {
    display: none;
    padding: 0.875rem 1rem;
    background: #fff5f5;
    border: 1px solid #fc8181;
    border-radius: 6px;
    margin-top: 1rem;
    color: #c53030;
    font-size: 0.875rem;
  }

  .custom-order-form-section .upload-error.show {
    display: block;
  }

  /* Captcha notice */
  .custom-order-form-section .captcha-notice {
    display: none;
    padding: 1rem;
    background: #fef3c7;
    border: 1px solid #fbbf24;
    border-radius: 6px;
    margin-top: 1rem;
    color: #92400e;
    font-size: 0.875rem;
  }

  .custom-order-form-section .captcha-notice.show {
    display: block;
  }

  .custom-order-form-section .captcha-notice strong {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.938rem;
  }

  .custom-order-form-section .captcha-notice ol {
    margin: 0.5rem 0 0.5rem 1.25rem;
    padding: 0;
  }

  .custom-order-form-section .captcha-notice li {
    margin: 0.25rem 0;
  }

  /* Upload warning */
  .custom-order-form-section .upload-warning {
    padding: 1rem;
    background: #fee2e2;
    border: 2px solid #ef4444;
    border-radius: 6px;
    color: #991b1b;
    font-size: 0.938rem;
    text-align: center;
    font-weight: 500;
    animation: pulse 2s ease-in-out infinite;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }

  .custom-order-form-section .upload-warning strong {
    font-weight: 700;
  }

  /* Form disabled state during upload */
  .custom-order-form-section .form.uploading {
    pointer-events: none;
    opacity: 0.6;
    position: relative;
  }

  .custom-order-form-section .form.uploading::after {
    content: '⏳ Uploading files... Please wait.';
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.85);
    color: white;
    padding: 1.5rem 2rem;
    border-radius: 8px;
    font-size: 1.125rem;
    font-weight: 600;
    z-index: 10000;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  /* Submit button disabled when files not uploaded */
  .custom-order-form-section button[type="submit"].files-not-uploaded {
    opacity: 0.5;
    cursor: not-allowed;
    position: relative;
  }

  .custom-order-form-section button[type="submit"].files-not-uploaded::after {
    content: '⚠️ Upload files first!';
    position: absolute;
    bottom: calc(100% + 0.5rem);
    left: 50%;
    transform: translateX(-50%);
    background: #ef4444;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.813rem;
    white-space: nowrap;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .custom-order-form-section button[type="submit"].files-not-uploaded:hover::after {
    opacity: 1;
  }

  @media (max-width: 768px) {
    .custom-order-form-section .fieldset-row {
      grid-template-columns: 1fr;
    }

    .custom-order-form-section .phone-input-group {
      grid-template-columns: 130px 1fr;
    }

    .custom-order-form-section .file-upload-container {
      padding: 2rem 1rem;
    }

    .custom-order-form-section .file-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .custom-order-form-section .file-status {
      width: 100%;
      justify-content: space-between;
    }
  }

  @media (max-width: 480px) {
    .custom-order-form-section .phone-input-group {
      grid-template-columns: 1fr;
    }
  }
</style>

<div class="section-spacing color-scheme color-scheme--{{ section.settings.color_scheme.id }} color-scheme--bg-{{ color_scheme_hash }} {% if section.settings.separate_section_with_border %}bordered-section{% endif %} custom-order-form-section">
  <div class="container container--xs">
    <div class="section-stack">
      {%- form 'contact', class: 'form', id: 'customOrderForm' -%}
        {%- if form.posted_successfully? -%}
          {%- assign content = 'contact.form.success_message' | t -%}
          {%- render 'banner', status: 'success', content: content -%}
        {%- endif -%}

        {%- if form.errors -%}
          {%- capture content -%}{{ form.errors.translated_fields[form.errors.first] | capitalize }} {{ form.errors.messages[form.errors.first] }}{%- endcapture -%}
          {%- render 'banner', status: 'error', content: content -%}
        {%- endif -%}

        <div class="fieldset">
          {%- comment -%} Name Fields {%- endcomment -%}
          <div class="fieldset-row">
            {%- assign first_name_label = 'First Name' -%}
            {%- render 'input', type: 'text', name: 'contact[first_name]', label: first_name_label, required: true, autocomplete: 'given-name' -%}

            {%- assign last_name_label = 'Last Name' -%}
            {%- render 'input', type: 'text', name: 'contact[last_name]', label: last_name_label, autocomplete: 'family-name' -%}
          </div>

          {%- comment -%} Email {%- endcomment -%}
          <div class="fieldset-row">
            <div class="full-width">
              {%- assign email_label = 'Email' -%}
              {%- render 'input', type: 'email', name: 'contact[email]', label: email_label, value: customer.email, required: true, autocomplete: 'email' -%}
            </div>
          </div>

          {%- comment -%} Phone with Country Code {%- endcomment -%}
          <div class="fieldset-row">
            <div class="full-width phone-input-group">
              {%- assign country_values = '+1 United States,+1 Canada,+44 United Kingdom,+61 Australia,+33 France,+49 Germany,+39 Italy,+34 Spain,+81 Japan,+86 China' | split: ',' -%}
              {%- render 'select', option_values: country_values, name: 'contact[country_code]', label: 'Country', required: false -%}
              
              {%- assign phone_label = 'Phone Number' -%}
              {%- render 'input', type: 'tel', name: 'contact[phone]', label: phone_label, required: true, autocomplete: 'tel' -%}
            </div>
          </div>

          {%- comment -%} State Selection {%- endcomment -%}
          <div class="fieldset-row">
            <div class="full-width">
              {%- assign state_label = 'Please select your state of residence' -%}
              {%- assign state_values = 'Alabama,Alaska,Arizona,Arkansas,California,Colorado,Connecticut,Delaware,Florida,Georgia,Hawaii,Idaho,Illinois,Indiana,Iowa,Kansas,Kentucky,Louisiana,Maine,Maryland,Massachusetts,Michigan,Minnesota,Mississippi,Missouri,Montana,Nebraska,Nevada,New Hampshire,New Jersey,New Mexico,New York,North Carolina,North Dakota,Ohio,Oklahoma,Oregon,Pennsylvania,Rhode Island,South Carolina,South Dakota,Tennessee,Texas,Utah,Vermont,Virginia,Washington,West Virginia,Wisconsin,Wyoming' | split: ',' -%}
              {%- render 'select', option_values: state_values, show_empty_value: true, name: 'contact[state]', label: state_label, required: false -%}
            </div>
          </div>

          {%- comment -%} Customer Type {%- endcomment -%}
          <div class="fieldset-row">
            <div class="full-width">
              {%- assign customer_type_label = 'Which best describes you?' -%}
              {%- assign customer_type_values = 'Homeowner,Contractor,Architect/Designer,Builder/Developer,Business Owner,Other' | split: ',' -%}
              {%- render 'select', option_values: customer_type_values, show_empty_value: true, name: 'contact[customer_type]', label: customer_type_label, required: false -%}
            </div>
          </div>

          {%- comment -%} Message {%- endcomment -%}
          <div class="fieldset-row">
            <div class="full-width">
              {%- assign message_label = 'Message' -%}
              {%- render 'input', name: 'contact[body]', label: message_label, multiline: 4, required: true, placeholder: 'Tell us about your custom order requirements...' -%}
            </div>
          </div>

          {%- comment -%} File Upload {%- endcomment -%}
          <div class="fieldset-row">
            <div class="full-width">
              <label class="file-upload-label">
                To evaluate the installation work, add photos here
              </label>
              
              <div class="file-upload-container" id="fileUploadContainer">
                <div class="upload-icon">☁️</div>
                <div class="upload-text">Choose Files</div>
                <div class="upload-hint">or drag and drop here • Max 10MB per file • JPG, PNG, PDF • Up to 999 files</div>
                <input 
                  type="file" 
                  id="fileInput" 
                  accept="image/jpeg,image/jpg,image/png,application/pdf"
                  multiple
                  style="display: none;"
                >
              </div>

              <div class="files-list" id="filesList">
                <div class="files-list-header">
                  <div class="files-count" id="filesCount">0 files selected</div>
                  <div style="display: flex; gap: 0.5rem;">
                    <button type="button" class="retry-upload-btn" id="retryUploadBtn" style="display: none;">Retry Upload</button>
                    <button type="button" class="clear-all-btn" id="clearAllBtn">Clear All</button>
                  </div>
                </div>
                <div id="filesContainer"></div>
              </div>

              <div class="upload-progress-container" id="uploadProgressContainer">
                <div class="progress-header">
                  <div class="progress-label">Uploading files...</div>
                  <div class="progress-count" id="progressCount">0 / 0</div>
                </div>
                <div class="progress-bar">
                  <div class="progress-fill" id="progressFill"></div>
                </div>
              </div>

              <div class="upload-error" id="uploadError">
                Upload failed. Please try again.
              </div>

              <div class="captcha-notice" id="captchaNotice">
                <strong>⚠️ Cloudinary Captcha Detected</strong>
                If a captcha window opened:
                <ol>
                  <li>Complete the captcha verification</li>
                  <li>Return to this page</li>
                  <li>Click the <strong>"Retry Upload"</strong> button</li>
                  <li>Your files will upload successfully</li>
                </ol>
                Already uploaded files will be skipped automatically.
              </div>

              {%- comment -%} Hidden field to store file URLs {%- endcomment -%}
              <input type="hidden" name="contact[photo_urls]" id="photoUrls" value="">
            </div>
          </div>

          {%- comment -%} Upload warning {%- endcomment -%}
          <div class="fieldset-row">
            <div class="full-width">
              <div class="upload-warning" id="uploadWarning" style="display: none;">
                ⚠️ <strong>Files not uploaded!</strong> Please wait for upload to complete or click "Retry Upload" before submitting.
              </div>
            </div>
          </div>
        </div>

        {%- assign button_content = 'Submit Request' -%}
        {%- render 'button', content: button_content, type: 'submit' -%}
      {%- endform -%}
    </div>
  </div>
</div>

<script>
(function() {
  'use strict';
  
  // ⚙️ CLOUDINARY CONFIGURATION
  const CLOUDINARY_CONFIG = {
    cloudName: '{{ section.settings.cloudinary_cloud_name }}',
    uploadPreset: '{{ section.settings.cloudinary_upload_preset }}'
  };

  // Constants
  const MAX_FILES = 999;
  const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
  const ALLOWED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];

  // State
  let selectedFiles = [];
  let uploadedUrls = [];

  // Phone number formatting
  const phoneInputs = document.querySelectorAll('input[name="contact[phone]"]');
  phoneInputs.forEach(function(phoneInput) {
    phoneInput.addEventListener('input', function(e) {
      let value = e.target.value.replace(/\D/g, '');
      if (value.length > 0) {
        if (value.length <= 3) {
          value = '(' + value;
        } else if (value.length <= 6) {
          value = '(' + value.slice(0, 3) + ') ' + value.slice(3);
        } else {
          value = '(' + value.slice(0, 3) + ') ' + value.slice(3, 6) + '-' + value.slice(6, 10);
        }
      }
      e.target.value = value;
    });
  });

  // File upload elements
  const fileUploadContainer = document.getElementById('fileUploadContainer');
  const fileInput = document.getElementById('fileInput');
  const filesList = document.getElementById('filesList');
  const filesContainer = document.getElementById('filesContainer');
  const filesCount = document.getElementById('filesCount');
  const clearAllBtn = document.getElementById('clearAllBtn');
  const uploadProgressContainer = document.getElementById('uploadProgressContainer');
  const progressFill = document.getElementById('progressFill');
  const progressCount = document.getElementById('progressCount');
  const uploadError = document.getElementById('uploadError');
  const photoUrlsInput = document.getElementById('photoUrls');
  const captchaNotice = document.getElementById('captchaNotice');
  const uploadWarning = document.getElementById('uploadWarning');

  if (!fileUploadContainer || !fileInput) return;

  // Click to select files
  fileUploadContainer.addEventListener('click', function() {
    fileInput.click();
  });

  // File selection
  fileInput.addEventListener('change', function(e) {
    if (e.target.files.length > 0) {
      handleFilesSelection(Array.from(e.target.files));
    }
  });

  // Drag and drop
  fileUploadContainer.addEventListener('dragover', function(e) {
    e.preventDefault();
    e.stopPropagation();
    fileUploadContainer.classList.add('dragover');
  });

  fileUploadContainer.addEventListener('dragleave', function(e) {
    e.preventDefault();
    e.stopPropagation();
    fileUploadContainer.classList.remove('dragover');
  });

  fileUploadContainer.addEventListener('drop', function(e) {
    e.preventDefault();
    e.stopPropagation();
    fileUploadContainer.classList.remove('dragover');
    
    if (e.dataTransfer.files.length > 0) {
      handleFilesSelection(Array.from(e.dataTransfer.files));
    }
  });

  // Clear all files
  if (clearAllBtn) {
    clearAllBtn.addEventListener('click', function() {
      resetUploadState();
      updateFilesDisplay();
      hideError();
    });
  }

  // Retry upload button
  const retryUploadBtn = document.getElementById('retryUploadBtn');
  if (retryUploadBtn) {
    retryUploadBtn.addEventListener('click', async function() {
      hideError();
      hideCaptchaNotice();
      
      // Show uploading state
      const submitButton = document.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.dataset.originalText = submitButton.textContent;
        submitButton.textContent = 'Uploading files...';
      }

      // Retry upload
      const success = await uploadAllFiles();

      // Restore button
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = submitButton.dataset.originalText;
      }
      
      // Update button state
      updateSubmitButtonState();

      if (success) {
        showSuccess('All files uploaded successfully! You can now submit the form.');
      }
    });
  }

  // Reset upload state (keeps selected files but clears uploaded state)
  function resetUploadState() {
    selectedFiles = [];
    uploadedUrls = [];
    fileInput.value = '';
    photoUrlsInput.value = '';
  }

  // Update submit button state based on file upload status
  function updateSubmitButtonState() {
    const submitButton = document.querySelector('button[type="submit"]');
    if (!submitButton) return;

    if (selectedFiles.length > 0) {
      const allUploaded = selectedFiles.every(function(f) {
        return f.status === 'uploaded' && f.url;
      });

      if (allUploaded) {
        // All files uploaded - enable button
        submitButton.classList.remove('files-not-uploaded');
        submitButton.disabled = false;
        submitButton.title = 'Submit form';
        
        // Hide warning
        if (uploadWarning) {
          uploadWarning.style.display = 'none';
        }
      } else {
        // Files not uploaded - disable button
        submitButton.classList.add('files-not-uploaded');
        submitButton.disabled = true;
        submitButton.title = 'Please wait for files to upload or click Retry Upload';
        
        // Show warning
        if (uploadWarning) {
          uploadWarning.style.display = 'block';
        }
      }
    } else {
      // No files - enable button
      submitButton.classList.remove('files-not-uploaded');
      submitButton.disabled = false;
      submitButton.title = 'Submit form';
      
      // Hide warning
      if (uploadWarning) {
        uploadWarning.style.display = 'none';
      }
    }
  }

  // Show/hide retry button based on file states
  function updateRetryButtonVisibility() {
    if (!retryUploadBtn) return;
    
    const hasFailedFiles = selectedFiles.some(function(f) { 
      return f.status === 'error'; 
    });
    
    const hasUnuploadedFiles = selectedFiles.some(function(f) { 
      return f.status === 'pending'; 
    });
    
    if (hasFailedFiles || (selectedFiles.length > 0 && hasUnuploadedFiles && uploadedUrls.length < selectedFiles.length)) {
      retryUploadBtn.style.display = 'block';
    } else {
      retryUploadBtn.style.display = 'none';
    }
  }

  // Show success message
  function showSuccess(message) {
    // Reuse error element but style it as success
    uploadError.textContent = message;
    uploadError.style.background = '#f0fdf4';
    uploadError.style.borderColor = '#86efac';
    uploadError.style.color = '#166534';
    uploadError.classList.add('show');
    
    setTimeout(function() {
      hideError();
    }, 5000);
  }

  // Handle multiple files selection
  function handleFilesSelection(newFiles) {
    hideError();

    // Check total count
    const totalFiles = selectedFiles.length + newFiles.length;
    if (totalFiles > MAX_FILES) {
      showError('Maximum ' + MAX_FILES + ' files allowed. You selected ' + totalFiles + ' files.');
      return;
    }

    // Validate each file
    const validFiles = [];
    let hasErrors = false;

    newFiles.forEach(function(file) {
      // Check size
      if (file.size > MAX_FILE_SIZE) {
        showError(file.name + ' is too large. Maximum size is 10MB per file.');
        hasErrors = true;
        return;
      }

      // Check type
      if (!ALLOWED_TYPES.includes(file.type)) {
        showError(file.name + ' is not a valid file type. Please upload JPG, PNG, or PDF.');
        hasErrors = true;
        return;
      }

      validFiles.push({
        file: file,
        id: Date.now() + Math.random(),
        status: 'pending', // pending, uploading, uploaded, error
        url: null,
        error: null
      });
    });

    if (validFiles.length > 0) {
      selectedFiles = selectedFiles.concat(validFiles);
      updateFilesDisplay();
      
      // Автоматически запускаем загрузку файлов
      uploadAllFiles();
    }
  }

  // Update files display
  function updateFilesDisplay() {
    if (selectedFiles.length === 0) {
      filesList.classList.remove('show');
      if (retryUploadBtn) {
        retryUploadBtn.style.display = 'none';
      }
      updateSubmitButtonState();
      return;
    }

    filesList.classList.add('show');
    filesCount.textContent = selectedFiles.length + ' file' + (selectedFiles.length !== 1 ? 's' : '') + ' selected';

    // Clear container
    filesContainer.innerHTML = '';

    // Add each file
    selectedFiles.forEach(function(fileObj, index) {
      const fileItem = createFileItem(fileObj, index);
      filesContainer.appendChild(fileItem);
    });

    // Update retry button visibility
    updateRetryButtonVisibility();
    
    // Update submit button state
    updateSubmitButtonState();
  }

  // Create file item element
  function createFileItem(fileObj, index) {
    const div = document.createElement('div');
    div.className = 'file-item';
    div.dataset.fileId = fileObj.id;

    if (fileObj.status === 'uploading') {
      div.classList.add('uploading');
    } else if (fileObj.status === 'uploaded') {
      div.classList.add('uploaded');
    } else if (fileObj.status === 'error') {
      div.classList.add('error');
    }

    const fileIcon = getFileIcon(fileObj.file.type);
    const statusIcon = getStatusIcon(fileObj.status);

    div.innerHTML = 
      '<div class="file-info-wrapper">' +
        '<div class="file-icon">' + fileIcon + '</div>' +
        '<div class="file-details">' +
          '<div class="file-name">' + escapeHtml(fileObj.file.name) + '</div>' +
          '<div class="file-size">' + formatFileSize(fileObj.file.size) + '</div>' +
        '</div>' +
      '</div>' +
      '<div class="file-status">' +
        '<span class="status-icon">' + statusIcon + '</span>' +
        '<button type="button" class="remove-file-btn" data-index="' + index + '">×</button>' +
      '</div>';

    // Add remove handler
    const removeBtn = div.querySelector('.remove-file-btn');
    removeBtn.addEventListener('click', function() {
      removeFile(index);
    });

    return div;
  }

  // Get file icon based on type
  function getFileIcon(type) {
    if (type.startsWith('image/')) return '🖼️';
    if (type === 'application/pdf') return '📄';
    return '📎';
  }

  // Get status icon
  function getStatusIcon(status) {
    switch(status) {
      case 'uploading': return '⏳';
      case 'uploaded': return '✅';
      case 'error': return '❌';
      default: return '';
    }
  }

  // Remove file
  function removeFile(index) {
    const fileObj = selectedFiles[index];
    
    // Remove from uploadedUrls if it was uploaded
    if (fileObj.url && uploadedUrls.includes(fileObj.url)) {
      uploadedUrls = uploadedUrls.filter(function(url) { return url !== fileObj.url; });
    }
    
    selectedFiles.splice(index, 1);
    updateFilesDisplay();
    hideError();
  }

  // Upload all files to Cloudinary
  async function uploadAllFiles() {
    if (selectedFiles.length === 0) return true;

    // Check config
    if (!CLOUDINARY_CONFIG.cloudName || !CLOUDINARY_CONFIG.uploadPreset) {
      showError('Cloudinary is not configured. Please contact support.');
      return false;
    }

    // Filter files that need to be uploaded (skip already uploaded)
    const filesToUpload = selectedFiles.filter(function(f) {
      return f.status !== 'uploaded' || !f.url;
    });

    if (filesToUpload.length === 0) {
      console.log('All files already uploaded');
      return true;
    }

    console.log('Starting upload of ' + filesToUpload.length + ' files (total: ' + selectedFiles.length + ')...');

    // Block the entire form during upload
    const form = document.getElementById('customOrderForm');
    if (form) {
      form.classList.add('uploading');
    }

    // Show progress
    uploadProgressContainer.classList.add('show');
    progressFill.style.width = '0%';

    let uploadedCount = uploadedUrls.length; // Start from already uploaded
    const totalCount = selectedFiles.length;

    try {
      // Upload only pending/error files
      for (let i = 0; i < selectedFiles.length; i++) {
        const fileObj = selectedFiles[i];
        
        // Skip already uploaded files
        if (fileObj.status === 'uploaded' && fileObj.url) {
          console.log('Skipping already uploaded file: ' + fileObj.file.name);
          continue;
        }
        
        console.log('Uploading file ' + (uploadedCount + 1) + '/' + totalCount + ': ' + fileObj.file.name);
        
        // Update status
        fileObj.status = 'uploading';
        updateFileItemStatus(fileObj.id, 'uploading');

        // Update progress
        progressCount.textContent = (uploadedCount + 1) + ' / ' + totalCount;

        try {
          const url = await uploadSingleFile(fileObj.file);
          fileObj.url = url;
          fileObj.status = 'uploaded';
          
          // Only add if not already in array
          if (!uploadedUrls.includes(url)) {
            uploadedUrls.push(url);
          }
          
          uploadedCount++;
          
          console.log('✅ Uploaded successfully: ' + fileObj.file.name);
          
          // Update progress bar
          const progress = (uploadedCount / totalCount) * 100;
          progressFill.style.width = progress + '%';

          updateFileItemStatus(fileObj.id, 'uploaded');

        } catch (error) {
          console.error('❌ Upload failed for', fileObj.file.name, error);
          fileObj.status = 'error';
          fileObj.error = error.message;
          updateFileItemStatus(fileObj.id, 'error');
        }
      }

      console.log('Upload complete. Uploaded: ' + uploadedCount + '/' + totalCount);

      // Update retry button visibility
      updateRetryButtonVisibility();

      // Update submit button state
      updateSubmitButtonState();

      // STRICT CHECK: All files must be uploaded successfully
      if (uploadedCount === totalCount) {
        console.log('✅ All files uploaded successfully!');
        // Store URLs
        photoUrlsInput.value = uploadedUrls.join(',');
        
        // Wait a moment for UI to update
        await new Promise(resolve => setTimeout(resolve, 500));
        
        return true;
      } else {
        console.log('❌ Not all files uploaded. Success: ' + uploadedCount + ', Failed: ' + (totalCount - uploadedCount));
        showError('Some files failed to upload (' + uploadedCount + '/' + totalCount + ' successful). Click "Retry Upload" to try again or remove failed files.');
        return false;
      }

    } catch (error) {
      console.error('Upload error:', error);
      showError('Upload failed. Click "Retry Upload" to try again.');
      return false;
    } finally {
      // Unblock form
      if (form) {
        form.classList.remove('uploading');
      }
      
      // Update retry button
      updateRetryButtonVisibility();
      
      // Скрываем прогресс только если все файлы успешно загружены
      const hasErrors = selectedFiles.some(function(f) { return f.status === 'error'; });
      if (!hasErrors && uploadedCount === totalCount) {
        // Все успешно - скрываем через 3 секунды
        setTimeout(function() {
          uploadProgressContainer.classList.remove('show');
        }, 3000);
      }
      // Если есть ошибки - оставляем прогресс видимым для пользователя
    }
  }

  // Upload single file to Cloudinary
  function uploadSingleFile(file) {
    return new Promise(async function(resolve, reject) {
      try {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('upload_preset', CLOUDINARY_CONFIG.uploadPreset);

        const response = await fetch(
          'https://api.cloudinary.com/v1_1/' + CLOUDINARY_CONFIG.cloudName + '/image/upload',
          {
            method: 'POST',
            body: formData
          }
        );

        if (!response.ok) {
          // Check if it's a captcha/rate limit error
          const status = response.status;
          if (status === 420 || status === 429) {
            // Rate limit or captcha
            throw new Error('CAPTCHA_OR_RATE_LIMIT');
          }
          throw new Error('Upload failed with status ' + status);
        }

        const data = await response.json();
        resolve(data.secure_url);

      } catch (error) {
        // Check if it's a captcha error
        if (error.message.includes('CAPTCHA') || error.message.includes('RATE_LIMIT')) {
          showCaptchaNotice();
        }
        reject(error);
      }
    });
  }

  // Update file item status in DOM
  function updateFileItemStatus(fileId, status) {
    const fileItem = document.querySelector('[data-file-id="' + fileId + '"]');
    if (!fileItem) return;

    fileItem.classList.remove('uploading', 'uploaded', 'error');
    
    if (status === 'uploading') {
      fileItem.classList.add('uploading');
    } else if (status === 'uploaded') {
      fileItem.classList.add('uploaded');
    } else if (status === 'error') {
      fileItem.classList.add('error');
    }

    const statusIcon = fileItem.querySelector('.status-icon');
    if (statusIcon) {
      statusIcon.textContent = getStatusIcon(status);
    }
    
    // Update submit button state when file status changes
    updateSubmitButtonState();
  }

  // Form submission
  const form = document.getElementById('customOrderForm');
  if (form) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      e.stopPropagation();

      const submitButton = form.querySelector('button[type="submit"]');

      // CRITICAL: Check if there are selected files that are NOT uploaded
      if (selectedFiles.length > 0) {
        const allUploadedSuccessfully = selectedFiles.every(function(fileObj) {
          return fileObj.status === 'uploaded' && fileObj.url;
        });

        if (!allUploadedSuccessfully) {
          // NOT all files are uploaded!
          console.error('⛔ BLOCKED: Not all files uploaded!');
          console.log('Selected files:', selectedFiles.length);
          console.log('Uploaded URLs:', uploadedUrls.length);
          console.log('Files status:', selectedFiles.map(f => f.status));
          
          showError('⛔ Files are not uploaded yet! Please wait for upload to complete or click "Retry Upload".');
          
          // Make sure retry button is visible
          updateRetryButtonVisibility();
          
          // Show captcha notice if not visible
          if (captchaNotice && selectedFiles.some(f => f.status === 'error')) {
            showCaptchaNotice();
          }
          
          return; // STOP - DO NOT SUBMIT!
        }

        // Double check: uploaded count must equal selected count
        if (uploadedUrls.length !== selectedFiles.length) {
          console.error('⛔ BLOCKED: Upload count mismatch!');
          console.log('Expected:', selectedFiles.length, 'Got:', uploadedUrls.length);
          showError('⛔ Upload count mismatch. Expected ' + selectedFiles.length + ' files but only ' + uploadedUrls.length + ' uploaded. Click "Retry Upload".');
          updateRetryButtonVisibility();
          return; // STOP!
        }

        console.log('✅ All files verified. Proceeding with form submission...');
      }

      // Check if there are files that need uploading
      const hasUnuploadedFiles = selectedFiles.some(function(f) {
        return f.status !== 'uploaded' || !f.url;
      });

      // Check if there are files to upload
      if (selectedFiles.length > 0 && hasUnuploadedFiles) {
        // Files selected but not all uploaded yet
        
        console.log('Detected unuploaded files. Starting upload...');
        
        // Block submit button and show uploading state
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.dataset.originalText = submitButton.textContent;
          submitButton.textContent = 'Uploading files...';
        }

        const success = await uploadAllFiles();

        // Restore button state
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = submitButton.dataset.originalText;
        }

        if (!success) {
          console.error('⛔ Upload failed!');
          return; // Don't submit form if upload failed
        }

        // CRITICAL CHECK: Verify ALL files are actually uploaded
        const allUploaded = selectedFiles.every(function(fileObj) {
          return fileObj.status === 'uploaded' && fileObj.url;
        });

        if (!allUploaded) {
          console.error('⛔ BLOCKED: Not all files uploaded after upload attempt!');
          showError('⛔ Not all files uploaded successfully. Click "Retry Upload" or remove failed files before submitting.');
          updateRetryButtonVisibility();
          return; // Don't submit!
        }

        // Double check uploaded count matches selected count
        if (uploadedUrls.length !== selectedFiles.length) {
          console.error('⛔ BLOCKED: Count mismatch after upload!');
          showError('⛔ Upload count mismatch. Expected ' + selectedFiles.length + ' but got ' + uploadedUrls.length + '. Click "Retry Upload" to try again.');
          updateRetryButtonVisibility();
          return; // Don't submit!
        }

        // Add photo URLs to message
        const messageTextarea = form.querySelector('textarea[name="contact[body]"]');
        if (messageTextarea && uploadedUrls.length > 0) {
          const currentMessage = messageTextarea.value || '';
          let photosText = '\n\nPhotos (' + uploadedUrls.length + '):';
          uploadedUrls.forEach(function(url, index) {
            photosText += '\n' + (index + 1) + '. ' + url;
          });
          messageTextarea.value = currentMessage + photosText;
        }

        // Final check before submit
        console.log('✅ All files uploaded successfully. Submitting form...');
        console.log('URLs being submitted:', uploadedUrls);
        
        // Submit form
        form.submit();

      } else if (uploadedUrls.length > 0 && selectedFiles.length > 0) {
        // Files already uploaded - verify they match
        if (uploadedUrls.length !== selectedFiles.length) {
          console.error('⛔ BLOCKED: Pre-submit verification failed!');
          showError('⛔ Upload verification failed. Some files may not be uploaded. Click "Retry Upload" or refresh the page.');
          updateRetryButtonVisibility();
          return;
        }

        const messageTextarea = form.querySelector('textarea[name="contact[body]"]');
        if (messageTextarea) {
          const currentMessage = messageTextarea.value || '';
          if (!currentMessage.includes(uploadedUrls[0])) {
            let photosText = '\n\nPhotos (' + uploadedUrls.length + '):';
            uploadedUrls.forEach(function(url, index) {
              photosText += '\n' + (index + 1) + '. ' + url;
            });
            messageTextarea.value = currentMessage + photosText;
          }
        }
        
        console.log('✅ Submitting with pre-uploaded files:', uploadedUrls.length);
        form.submit();

      } else {
        // No files selected
        console.log('No files to upload. Submitting form...');
        form.submit();
      }
    });
  }

  // Helper functions
  function showError(message) {
    uploadError.textContent = message;
    uploadError.classList.add('show');
  }

  function hideError() {
    uploadError.classList.remove('show');
    // Reset styles to default error styles
    uploadError.style.background = '#fff5f5';
    uploadError.style.borderColor = '#fc8181';
    uploadError.style.color = '#c53030';
  }

  function showCaptchaNotice() {
    if (captchaNotice) {
      captchaNotice.classList.add('show');
      console.log('⚠️ Cloudinary captcha detected. User needs to complete verification.');
    }
  }

  function hideCaptchaNotice() {
    if (captchaNotice) {
      captchaNotice.classList.remove('show');
    }
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
})();
</script>

{% schema %}
{
  "name": "Custom Order Form",
  "class": "shopify-section--custom-order-form",
  "tag": "section",
  "disabled_on": {
    "groups": ["header", "custom.overlay"]
  },
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "scheme-1"
    },
    {
      "type": "checkbox",
      "id": "separate_section_with_border",
      "label": "Separate section with border",
      "default": true
    },
    {
      "type": "header",
      "content": "Cloudinary Settings"
    },
    {
      "type": "text",
      "id": "cloudinary_cloud_name",
      "label": "Cloudinary Cloud Name",
      "info": "Your Cloudinary cloud name (e.g., 'dt4lffajz')"
    },
    {
      "type": "text",
      "id": "cloudinary_upload_preset",
      "label": "Cloudinary Upload Preset",
      "info": "Your unsigned upload preset name (e.g., 'alpadadoors_form')"
    }
  ],
  "presets": [
    {
      "name": "Custom Order Form"
    }
  ]
}
{% endschema %}
